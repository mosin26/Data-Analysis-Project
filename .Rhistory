---
title: "home_work2"
output: pdf_document
---
task1:
All information in summary:
```{r}
data = read.csv("data.csv", sep = ",")
summary(data)
setwd('D:/Documents/Education/HSE/1-й курс/Современные методы анализа данных/Homeworks')
data = read.csv("data.csv", sep = ",")
summary(data)
colnames(data)
```
As we know age is one of the most important factors in the sport, a lot of that depends on it ... also usually compare the average age of teams in this comparison makes some assumptions about the style of play the team.
histogram:
```{r, echo=FALSE}
hist(data$Age, 8)
```
boxplot:
```{r}
boxplot(data$Age, main = 'Boxplot of data$Age', horizontal = TRUE)
```
mean:
```{r}
mean(data$Age)
```
median:
```{r}
median(data$Age)
Demidov Maxim
Mosin Vasiliy
data = read.csv("data.csv", sep = ",")
summary(data)
colnames(data)
```
As we know age is one of the most important factors in the sport, a lot of that depends on it ... also usually compare the average age of teams in this comparison makes some assumptions about the style of play the team.
histogram:
```{r, echo=FALSE}
hist(data$Age, 8)
```
boxplot:
```{r}
boxplot(data$Age, main = 'Boxplot of data$Age', horizontal = TRUE)
```
mean:
```{r}
mean(data$Age)
```
median:
```{r}
median(data$Age)
```
mode:
```{r}
findMode <- function(arg){
mean(data$Age)
n <- nrow(data)
m <- mean(data$Age)
s <- sd(data$Age)
conf.int <- c(m-1.965*s/sqrt(n), m+1.965*s/sqrt(n))
print(conf.int)
```
print(conf.int)
conf.int <- c(m-1.965*s/sqrt(n), m+1.965*s/sqrt(n))
mean(data$Age)
n <- nrow(data)
m <- mean(data$Age)
s <- sd(data$Age)
conf.int <- c(m-1.965*s/sqrt(n), m+1.965*s/sqrt(n))
print(conf.int)
means <- c()
for(i in 1:5000)
{
means[i] <- mean(sample(data$Age, 50, replace = TRUE))
}
```
new histogram:
```{r}
hist(means)
Because the histogram is similar to a normal distribution, we apply the technique of pivotal bootstrap.
```{r}
n <- 5000
m <- mean(means)
s <- sd(means)
pivotal.conf.int <- c(m-1.965*s/sqrt(n), m+1.965*s/sqrt(n))
print(pivotal.conf.int)
```
non-pivotal bootstrap:
```{r}
sorted.means  <- sort(means)
nonpivotal.conf.int <- c(sorted.means[0.025*5000], sorted.means[5000-0.025*5000])
print(nonpivotal.conf.int)
```
task3:
pivotal bootstrap for median:
```{r}
medians <- c()
for(i in 1:5000)
{
medians[i] <- median(sample(data$Age, 50, replace = TRUE))
}
hist(medians)
```
Because the histogram is not similar to a normal distribution, we can't apply the technique of pivotal bootstrap here.
Non-pivotal bootstrap for median:
```{r}
sorted.medians  <- sort(medians)
nonpivotal.conf.int <- c(sorted.medians[0.025*5000], sorted.medians[5000-0.025*5000])
print(nonpivotal.conf.int)
```
pivotal bootstrap for mode:
```{r}
modes <- c()
for(i in 1:5000)
{
modes[i] <- findMode(sample(data$Age, 50, replace = TRUE))
}
hist(modes)
```
```{r}
modes <- c()
for(i in 1:5000)
{
modes[i] <- findMode(sample(data$Age, 50, replace = TRUE))
}
hist(modes)
hist(modes)
```{r}
modes <- c()
for(i in 1:5000)
{
modes[i] <- findMode(sample(data$Age, 50, replace = TRUE))
}
```{r}
high.salary.players  <- data[data$Salary >= median(data$Salary),]
low.salary.players  <- data[data$Salary < median(data$Salary),]
print (mean(high.salary.players$Age))
print (mean(low.salary.players$Age))
```
bootstrape for high.salary.means:
```{r}
high.salary.means <- c()
for(i in 1:5000)
{
high.salary.means[i] <- mean(sample(high.salary.players$Age, 50, replace = TRUE))
}
hist(high.salary.means)
```
Because the histogram is similar to a normal distribution, we apply the technique of pivotal bootstrap.
```{r}
n <- 5000
m <- mean(high.salary.means)
s <- sd(high.salary.means)
pivotal.conf.int <- c(m-1.965*s/sqrt(n), m+1.965*s/sqrt(n))
print(pivotal.conf.int)
```
Non-pivotal bootstrap for high.salary.means:
```{r}
sorted.high.salary.means  <- sort(high.salary.means)
nonpivotal.conf.int <- c(sorted.high.salary.means[0.025*5000],
sorted.high.salary.means[5000-0.025*5000])
print(nonpivotal.conf.int)
```
bootstrape for low.salary.means:
```{r}
low.salary.means <- c()
for(i in 1:5000)
{
low.salary.means[i] <- mean(sample(low.salary.players$Age, 50, replace = TRUE))
}
hist(low.salary.means)
```
Because the histogram is similar to a normal distribution, we apply the technique of pivotal bootstrap.
```{r}
n <- 5000
m <- mean(low.salary.means)
s <- sd(low.salary.means)
pivotal.conf.int <- c(m-1.965*s/sqrt(n), m+1.965*s/sqrt(n))
print(pivotal.conf.int)
```
Non-pivotal bootstrap for high.salary.means:
```{r}
sorted.low.salary.means  <- sort(low.salary.means)
nonpivotal.conf.int <- c(sorted.low.salary.means[0.025*5000],
sorted.low.salary.means[5000-0.025*5000])
print(nonpivotal.conf.int)
```
mean(sample(data$Age, 50, replace = TRUE))
sample(data$Age, 50, replace = TRUE)
sample(data$Age, 50, replace = TRUE)
sample(data$Age, 50, replace = TRUE)
sample(data$Age, 50, replace = TRUE)
means <- c()
for(i in 1:5000)
{
means[i] <- mean(sample(data$Age, 50, replace = TRUE))
}
```
new histogram:
```{r}
hist(means)
means <- c()
means <- c()
means <- c()
means <- c()
for(i in 1:5000)
{
means[i] <- mean(sample(data$Age, 50, replace = TRUE))
}
```
new histogram:
```{r}
hist(means)
```
mean(data$Age)
n <- nrow(data)
m <- mean(data$Age)
s <- sd(data$Age)
conf.int <- c(m-1.965*s/sqrt(n), m+1.965*s/sqrt(n))
print(conf.int)
medians <- c()
for(i in 1:5000)
{
medians[i] <- median(sample(data$Age, 50, replace = TRUE))
}
hist(medians)
medians <- c()
for(i in 1:50000)
{
medians[i] <- median(sample(data$Age, 50, replace = TRUE))
}
hist(medians)
```
```{r}
medians <- c()
for(i in 1:50000)
{
medians[i] <- median(sample(data$Age, 50, replace = TRUE))
}
hist(medians)
```{r}
medians <- c()
for(i in 1:5000000)
{
medians[i] <- median(sample(data$Age, 50, replace = TRUE))
}
medians <- c()
for(i in 1:500)
{
medians[i] <- median(sample(data$Age, 50, replace = TRUE))
}
hist(medians)
medians <- c()
for(i in 1:5000)
{
medians[i] <- median(sample(data$Age, 50, replace = TRUE))
}
hist(medians)
```{r}
modes <- c()
for(i in 1:5000)
{
modes[i] <- findMode(sample(data$Age, 50, replace = TRUE))
}
hist(modes)
```
```{r}
modes <- c()
for(i in 1:5000)
{
modes[i] <- findMode(sample(data$Age, 50, replace = TRUE))
}
hist(modes)
```{r}
am = 1000
aM = 0
bm = 1000
bM = 0
n <- nrow(data)
am = 1000
aM = 0
bm = 1000
bM = 0
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a = (data$P[i]-data$P[j))/(data$A[i]-data$A[j))
if a > aM
am = 1000
aM = 0
bm = 1000
bM = 0
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
if a > aM
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a <- (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
if a > aM
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
if (a > aM)
aM = a
}
}
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a <- (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
if (a > aM)
aM = a
}
}
```
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
```
a <- c()
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
```
a <- c()
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
max(a)
```
```{r}
a <- c()
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
print(max(a))
```
```
```{r}
a <- c()
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if(data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
```{r}
a <- (c)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
```{r}
a <- (c)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
aM = max(a)
```{r}
a <- (c,c)
a <- (c)(c)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
}
}
```
a <- (c)(c)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if (data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
b[i][j] = (data$A[i]*data$P[j]-data$A[j]*data$P[i])/(data$A[i]-data$A[j])
}
}
b <- (c)(C)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if (data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
b[i][j] = (data$A[i]*data$P[j]-data$A[j]*data$P[i])/(data$A[i]-data$A[j])
}
}
```
a <- (c)(c)
b <- (c)(C)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if (data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
b[i][j] = (data$A[i]*data$P[j]-data$A[j]*data$P[i])/(data$A[i]-data$A[j])
}
}
aM = max(a)
am = min(a)
}
}
aM = max(a(:))
am = min(a)
```
a <- (c)(c)
b <- (c)(C)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if (data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
b[i][j] = (data$A[i]*data$P[j]-data$A[j]*data$P[i])/(data$A[i]-data$A[j])
}
}
aM = max(a(:))
am = min(a)
```
a <- (c,2)
b <- (c)(C)
```{r}
a <- (c,2)
b <- (c,2)
n <- nrow(data)
for(i in 1:n)
{
for(j in 1:n)
{
if (data$A[i]-data$A[j]!=0)
a[i][j] = (data$P[i]-data$P[j])/(data$A[i]-data$A[j])
b[i][j] = (data$A[i]*data$P[j]-data$A[j]*data$P[i])/(data$A[i]-data$A[j])
}
}
